As of November 2023, the most recent stable version of the language is C# 12.0, which was released in 2023 in .NET 8.0.

What's new in C# latest version?
C# 13 also supports extension static members, enabling the addition of static methods to existing types.


1) what is a class?
A) A class is a user-defined blueprint or prototype from which objects are created. Basically, a class combines the fields and methods(member function which defines actions) into a single unit. In C#, classes support polymorphism, inheritance and also provide the concept of derived classes and base classes.

2) what is an object?
A) Object is nothing but an instance of a class that is created dynamically. Object is also a keyword that is an alias for the predefined type System. The unified type system of C# allows objects to be defined. These can be user-defined, reference or value type, but they all inherit directly or indirectly from System.

3) value type and reference type ?
A) Value Type : A data type is a value type if it holds a data value within its own memory space. It means the variables of these data types directly contain values.

tip : All the value types derive from System.ValueType, which in-turn, derives from System.Object.
For example, consider integer variable int i = 100;

The system stores 100 in the memory space allocated for the variable i. The following image illustrates how 100 is stored at some hypothetical location in the memory (0x239110) for 'i':

value types ex (bool
byte
char
decimal
double
enum
float
int
long
sbyte
short
struct
uint
ulong
ushort)

Reference Type : Unlike value types, a reference type doesn't store its value directly. Instead, it stores the address where the value is being stored. In other words, a reference type contains a pointer to another memory location that holds the data.

4) When does a session actually start?
A) A session actually starts when a visitor requests your site for the first time. A new session starts when the request doesn't contain any SessionID or the sessionID references an expired session. The Session_OnStart event in Global.asax can be used for tracking session-related information.

5) How is a session maintained?
A) When a web app is requested for the first time, the server creates a sessionID and saves it in the cookie of the client browser. This sessionID is sent to the server in all the subsequent requests. If cookieless is made true, sessionID is sent in the URL else the cookie file is sent. This way the session is maintained with SessionID.

6) Define Constructors
A) constructor is a member function in a class that has the same name as its class. The constructor is automatically invoked whenever an object class is created. It constructs the values of data members while initializing the class.

7) What is the difference between ref & out parameters?
A) An argument passed as ref must be initialized before passing to the method whereas out parameter needs not to be initialized before passing to a method.

8) What is method overloading?
A) Method overloading is creating multiple methods with the same name with unique signatures in the same class. When we compile, the compiler uses overload resolution to determine the specific method to be invoke.

9) What's the difference between an interface and abstract class?
A) Interfaces have all the methods having only declaration but no definition. In an abstract class, we can have some concrete methods. In an interface class, all the methods are public. An abstract class may have private methods.

10) What is the difference between method overriding and method overloading?
A) In method overriding, we change the method definition in the derived class that changes the method behavior. Method overloading is creating a method with the same name within the same class having different signatures.

11) URL - Uniform resource locator is a virtual path generated by web server in order to access resource from a website.
12) URI - Uniform resource indicator specifies a named location with URL

13) whet is view engine?
A) it converts server side scripting to HTML.

14) diff between remote and windows service?
A) using remoting we can develop distributed applicatons, client-server/ network applications. distributed means communication between 2 applications or objects running in same machine or differnent machine. sharing data across networks. can carry data from server to client viceversa.
 1. proxy 2. marshalling/unmarshalling 3. protocals 4. server obj

 1.proxy : mediator b/w client and server
 2.marshalling/serialization : convert obj type into n/w understandable code
   unmarshalling/deserialization : n/w understandable code to obj 

15) diff between function and trigger?
A) 1. A Trigger is implicitly invoked whenever any event such as INSERT, DELETE, UPDATE occurs in a TABLE.
   1. A Procedure is explicitly called by user/application using statements or commands such as exec, EXECUTE, or simply procedure_name

   2. Transaction statements such as COMMIT, ROLLBACK, SAVEPOINT are not allowed in triggers.
   2. All transaction statements such as COMMIT, ROLLBACK are allowed in procedures.

   3. We cannot return values in a trigger. Also, as an input, we cannot pass values as a parameter.
   3. We can return 0 to n values. However, we can pass values as parameters.

16) what is windows service?
A) Windows Services are a core component of the Microsoft Windows operating system. enable the management of long-running processes. Unlike regular software that is launched by the end user and only runs when the user is logged on, Windows Services can start without user intervention and may continue to run long after the user has logged off. The services run in the background.

17) How to install windows service?
A) C:\Windows\Microsoft.NET\Framework64\v4.0.30319>InstallUtil.exe -i C:\TimerService\TimerService\bin\Debug\TimerService.exe


18) what is prime number ?
A) devided by it self

    n = int.Parse(Console.ReadLine());  
          m=n/2;    
          for(i = 2; i <= m; i++)    
          {    
           if(n % i == 0)    
            {    
             Console.Write("Number is not Prime.");    
             flag=1;    
             break;    
            }    
          }
	  if (flag==0)    
          Console.Write("Number is Prime.");    
 
for (int i = 1; i < 101; i++)
            {
               int count = 0;
                if (i > 1)
                {
                    for (int j = 2; j < i; j++)
                    {
                        if (i % j == 0)
                        {
                            count = 1;
                            break;
                        }
                    }
                    if (count == 0)
                    {
                        Console.Write(i+"  ");
                    }
                }
}

19) dataset and datareader in c#?
A)DataSet	                                                DataReader 

It has read/write access, we can update records  	           It has read-only access, we can’t update records
It supports both forward and backward scanning of data	         It supports forward-only scanning of data
It supports multiple data tables from different databases	It only supports a single table of one database
Slower access to data                                           Faster access to data
It is connection-less oriented                                  It is connection oriented

20) private constructor in c#?
A) Private constructors are used to prevent creating instances of a class

21) ViewState and DataTable?
A) Viwestate["Key"]=DataTable and DataTable dt=(DataTable)Viwestate["Key"]

22) RequiredField namespace?
A)System.ComponentModel.DataAnnotations

23) use of global.asax in asp.net?
A)Global.asax is an optional file which is used to handling higher level application events such as Application_Start, Application_End, Session_Start, Session_End etc. It is also popularly known as ASP.NET Application File. This file resides in the root directory of an ASP.

24) advantages of cache memory c#?
A) Reduce load on Web Services/ Database
Increase Performance
Reliability 

25) How to extract number from string?
A) System.Text.RegularExpressions;
string var = "Hello3453232wor705Ld";
                string mystr = Regex.Replace(var, @"\d", "");// only string
                string mynumber = Regex.Replace(var, @"\D", "");// only Number

26) how to assign null value to integer in c#?
A)  int? val=null; or Nullable<int> val

27) Constraints in SQL Server?
A) Default Constraint
UNIQUE KEY constraint
NOT NULL constraint
CHECK KEY constraint
PRIMARY KEY constraint
FOREIGN KEY constraint.

28) Foregin key ?
A) ALTER TABLE Orders
ADD FOREIGN KEY (PersonID) REFERENCES Persons(PersonID);

29) clause sequence in sql?
A) SELECT, FROM, WHERE, GROUP BY, HAVING and ORDER BY

30) Operator in SQL Server?
A) Assignment operator (=)
Arithmetic operator(+,-,*,%,/)
Comparison operator(=,!=,>,<,>=,<=,!<,!>)
Logical operator(and,or,not)
Set operator(UNION,UNION ALL,INTERSECT,INTERSECT)

31) joins in sql?
A) ANSI format JOINS (Inner join,Outer join(Left outer join,Right outer join,Full outer join),Cross join)
NON-ANSI format JOINS (EQUI join,NON-EQUI join,SELF-join,Natural Join)

32) string function in sql?
A) ASCII,LTRIM,RTRIM,LTRIM(RTRIM(‘   Hello   ‘)),LOWER,LOWER,REVERSE,LEN,LEFT(‘ABCDE’, 3),RIGHT(‘ABCDE’, 3),

33) store procedure in c#?
A) using (SqlCommand cmd = new SqlCommand("SP_ADD", con))
    {
        cmd.CommandType = CommandType.StoredProcedure;
        cmd.Parameters.AddWithValue("@FirstName", txtfirstname.Text);
        cmd.Parameters.AddWithValue("@LastName", txtlastname.Text);
        con.Open();
        cmd.ExecuteNonQuery();
        con.Close();
    }
using(sqlCon=new SqlConnection(SqlconString))  
           {  
             sqlCon.Open();  
             SqlCommand sql_cmnd = new SqlCommand("PROC_NAME", sqlCon);  
             sql_cmnd.CommandType = CommandType.StoredProcedure;  
             sql_cmnd.Parameters.AddWithValue("@FIRST_NAME", SqlDbType.NVarChar).Value=firstName;  
             sql_cmnd.Parameters.AddWithValue("@LAST_NAME", SqlDbType.NVarChar).Value=lastName;  
             sql_cmnd.Parameters.AddWithValue("@AGE", SqlDbType.Int).Value = age;  
             sql_cmnd.ExecuteNonQuery();  
             sqlCon.Close();  
           } 

using (SqlConnection conn = new SqlConnection(connString))
                {
                    string spName = @"dbo.[uspEmployeeInfo]";
                    SqlCommand cmd = new SqlCommand(spName, conn);
                    SqlParameter param1 = new SqlParameter();
                    param1.ParameterName = "@employeeID";
                    param1.SqlDbType = SqlDbType.Int;
                    param1.Value = int.Parse(args[0].ToString());
                    cmd.Parameters.Add(param1);
                    conn.Open();
                    cmd.CommandType = CommandType.StoredProcedure;
                    SqlDataReader dr = cmd.ExecuteReader();
                    dr.Close();
                    conn.Close();
                  }

34) Extension Methods?
A) Extension methods, as the name suggests, are additional methods. Extension methods allow you to inject additional methods without modifying, deriving or recompiling the original class, struct or interface. Extension methods can be added to your own custom class, .NET framework classes, or third party classes or interfaces.

35) const vs readonly c#?
A) ReadOnly Keyword                                             	Const Keyword
In C#, readonly fields can be created using readonly keyword	    In C#, constant fields are created using const keyword.
ReadOnly is a runtime constant.	                                    Const is a compile time constant.
The value of readonly field can be changed.	                        The value of the const field can not be changed.
It cannot be declared inside the method.	                        It can be declared inside the method.
In readonly fields, we can assign values in declaration             In const fields, we can only assign values in declaration part.
and in the constructor part.	                               
It can be used with static modifiers.	                            It cannot be used with static modifiers.

36) unique char in given string?
A) string code = "helloBalabworld";
   string answer = new string(code.Distinct().ToArray());

37) json.stringify and json.parse difference?
A) stringify() is used to convert JSON object to JSON String. It serializes a JavaScript object into a JSON string.
parse() is used to convert JSON string/Array object to JSON Object. It deserializes a JSON string into a JavaScript object.

38) Encapsulation?
A) Wrapping up a data member and a method together into a single unit (in other words, class) is called Encapsulation.

39) Abstraction?
A) Abstraction is "To represent the essential feature without representing the background details."

40) Inheritance?
A) When a class includes a property of another class, it is known as inheritance. Inheritance is a process of object reusability.

C#.Net will support 5 types of Inheritance. They are
1. Single Inheritance
2. Multi-level Inheritance
3. Multiple Inheritance
4. Hierarchical Inheritance
5. Hybrid Inheritance

41) Polymorphism?
A) Polymorphism means one name, many forms. One function behaves in different forms. In other words, "Many forms of a single object is called Polymorphism."

42) Difference between Abstract Class and Interface?
A) Abstract Class	Interface
It contains both declaration and implementation parts.	It contains only the declaration of methods, properties, events, or indexers. Since C# 8, default implementations can also be included in interfaces.
Multiple inheritance is not achieved by abstract class.	Multiple inheritance is achieved by interface.
It contain constructor.	It does not contain constructor.
It can contain static members.	It does not contain static members.
It can contain different types of access modifiers like public, private, protected etc.	It only contains public access modifier because everything in the interface is public.
The performance of an abstract class is fast.	The performance of interface is slow because it requires time to search actual method in the corresponding class.
It is used to implement the core identity of class.	It is used to implement peripheral abilities of class.
A class can only use one abstract class.	A class can use multiple interface.
If many implementations are of the same kind and use common behavior, then it is superior to use abstract class.	If many implementations only share methods, then it is superior to use Interface.
Abstract class can contain methods, fields, constants, etc.	Interface can only contains methods, properties, indexers, events.
The keyword “:” can be used for implementing the Abstract class.	The keyword “:” and “,” can be used for implementing the Interface.
It can be fully, partially or not implemented.	It should be fully implemented.
To declare abstract class , we use abstract keyword.	To declare interface, we use interface keyword.

43) Difference between functions and stored procedures?
A) 1. SP may or may not return a value but UDF must return a value.
   2. SP can have input/output parameters but UDF only has input parameters. 
   3. We can call UDF from SP but cannot call SP from a function. 
   4. We cannot use SP in SQL statements like SELECT, INSERT, UPDATE, DELETE, MERGE, etc. but we can use them with UDF.
   5. SP is not allowed to be used in SELECT statements, but UDF can be used.
   6. SP cannot be used anywhere in the WHERE/HAVING/SELECT part of SQL queries, but UDF can be used.
   7. The execution plan can be re-used in SP but in UDF it will be compiled every time.
   8. We can use try-catch exception handling in SP but we cannot do that in UDF.
   9. We can use transactions in SP but it is not possible in UDF.
  10. We can consider UDF as an expression but it is not possible in SP.
  11. SP cannot be used in the join clause but it is possible in UDF as a resultset.
  12. SP can have both table variables and temporary tables but UDF can have only table variables as it does not permit the use of temporary tables.

44) index in sql?
A) The Index in SQL is a special table used to speed up the searching of the data in the database tables.
   1. Clustered Index - Clustered Index stores and sort rows of data in a view or table depending on their central values.
   2. Non-Clustered Index - It represents a structure, which is isolated from data rows.
   3. Column Store Index - a standard type of index with regards to putting away and questioning enormous data warehousing truth tables.
   4. Filtered Index - that is made when a column has just a few applicable numbers for questions on the subset of values.
   5. Hash Index - that slots containing a pointer or an array of N buckets and a row on each slot or bucket.
   6. Unique Index - confirms and guarantees that the index key doesn’t contain any copy esteems and along these lines.
 

45). What is C#? And What is the latest version of C#?
A) C# is a computer programming language. Microsoft developed C# in 2000 to provide a modern general-purpose programming language that can be used to develop all kinds of software targeting various platforms, including Windows, Web, and Mobile, using just one programming language. Today, C# is one of the most popular programming languages in the world. Millions of software developers use C# to build all kinds of software. 

46). What is an object in C#? 
 A) C# language is an object-oriented programming language. Classes are the foundation of C#. A class is a template that defines a data structure and how data will be stored, managed, and transferred. A class has fields, properties, methods, and other members.

While classes are concepts, objects are real. Objects are created using class instances. A class defines the type of an object. Objects store real values in computer memory.

47) . What is Managed or Unmanaged Code? 
 A) Managed Code
Managed code is the code that is developed using the .NET framework and its supported programming languages such as C# or VB.NET.
Unmanaged Code
The code that is developed outside of the .NET framework is known as unmanaged code.

48) . What is Boxing and Unboxing in C#? 
 A) Boxing and Unboxing are both used for type conversions.

Converting from a value type to a reference type is called boxing. Boxing is an implicit conversion. Here is an example of boxing in C#.

// Boxing
int anum = 123;
Object obj = anum;
Console.WriteLine(anum);
Console.WriteLine(obj);

Converting from a reference type to a value type is called unboxing. Here is an example of unboxing in C#.

// Unboxing
Object obj2 = 123;
int anum2 = (int)obj;
Console.WriteLine(anum2);
Console.WriteLine(obj);

49) . What is the difference between a struct and a class in C#? 
A) Struct
The struct is a value type in C# and inherits from System.Value Type.
Struct is usually used for smaller amounts of data.
Struct can’t be inherited from other types.
A structure can't be abstract.
No need to create an object with a new keyword.
Do not have permission to create any default constructor.

Class
The class is a reference type in C#, and it inherits from the System.Object Type.
Classes are usually used for large amounts of data.
Classes can be inherited from other classes.
A class can be an abstract type.
We can create a default constructor.

50) . What is the difference between Interface and Abstract Class in C#? 
 A) A class can implement any number of interfaces, but a subclass can, at most, use only one abstract class.
An abstract class can have non-abstract methods (concrete methods), while in the case of interface, all the methods have to be abstract.
An abstract class can declare or use any variables, while an interface cannot do so.
In an abstract class, all data members or functions are private by default, while in an interface, all are public; we can’t change them manually.
In an abstract class, we need to use abstract keywords to declare abstract methods; in an interface, we don’t need that.
An abstract class can’t be used for multiple inheritance, while the interface can be used for multiple inheritance.
An abstract class uses a constructor, while we don’t have any constructor in an interface.

51). What is an enum in C#? 
 A) An enum is a value type with a set of related named constants, often called an enumerator list. The enum keyword is used to declare an enumeration. It is a primitive data type that is user-defined.
enum Dow {Sat, Sun, Mon, Tue, Wed, Thu, Fri};

52) . What is the difference between “continue” and “break” statements in C#? 
 A) Using a break statement, you can 'jump out of a loop,' whereas using a continue statement, you can 'jump over one iteration' and resume your loop execution.

53) . What is the difference between constant and readonly in C#?
 A) Const is nothing but "constant," a variable whose value is constant but at compile time. Therefore, it's mandatory to assign a value to it. By default, a const is static, and we cannot change the value of a const variable throughout the entire program.
Readonly is the keyword whose value we can change during runtime or assign it at run time but only through the non-static constructor.

54) . What is the difference between ref and out keywords?
 A) The ref keyword passes arguments by reference. Therefore, any changes made to this argument in the method will be reflected in that variable when the control returns to the calling method.
The out keyword passes arguments by reference. This is very similar to the ref keyword.

55) . Can “this” be used within a static method?
 A) We can't use 'this' in a static method because the keyword 'this' returns a reference to the current instance of the class containing it. Static methods (or any static member) do not belong to a particular instance. They exist without creating an instance of the class and are called with the name of a class, not by instance, so we can’t use this keyword in the body of static Methods. However, in the case of Extension Methods, we can use the parameters of the method.

56) . What are properties in C#?
 A) In C#, a property is a member of a class that provides a way to read, write or compute the value of a private field. It exposes a public interface to access and modify the data stored in a class while allowing the class to maintain control over how that data is accessed and manipulated.

57) . What is an extension method in C#?
 A) In C#, an extension method is a static method used to extend the functionality of an existing type without modifying the original type or creating a new derived type. Extension methods allow developers to add methods to existing types, such as classes, structs, interfaces, enums, etc., not originally defined in those types.
public static class StringExtensions
{
    public static string CapitalizeFirstLetter(this string str)
    {
        if (string.IsNullOrEmpty(str))
            return str;
        return char.ToUpper(str[0]) + str.Substring(1);
    }
}

58) . What is the use of a delegate in C#?
 A) A Delegate is an abstraction of one or more function pointers (as existed in C++; the explanation about this is out of the scope of this article). The .NET has implemented the concept of function pointers in the form of delegates. With delegates, you can treat a function as data. Delegates allow functions to be passed as parameters, returned from a function as a value, and stored in an array. Delegates have the following characteristics:

59) . What are sealed classes in C#?
 A) Sealed classes are used to restrict the inheritance feature of object-oriented programming. Once a class is defined as a sealed class, the class cannot be inherited. 

60) . What are partial classes in C#? Why do we need partial classes?
 A) A partial class is only used to split the definition of a class into two or more classes in the same source code file or more than one source file. You can create a class definition in multiple files, which will be compiled as one class at run time. Also, when you create an instance of this class, you can access all the methods from all source files with the same object.

61) Generics in C#?
A) Generics in C# is a feature that allows for the creation of reusable code by creating parameterized types. In simple terms, it enables us to create classes, interfaces, and methods that work with different data types without having to define the data type explicitly.

62) Design Patterns In C#?
A) Design Patterns: Elements of Reusable Object-Oriented Software
   1. Creational Design Pattern (Object Creation and Initialization)
     a. Factory Method, Abstract Factory, Builder, Prototype, Singleton
	 Singleton : This pattern ensures that the class has only one instance and provides a global point of access to it. The pattern ensures that only one object of a specific class is ever created. services.AddSingleton<ILog, MyConsoleLogger>();
   2. Structural Design Pattern (Structural Changes of Classes, and Interfaces, and the Relationship Between Classes)
     a. Adapter, Bridge, Composite, Decorator, Façade, Flyweight, Proxy
   3. Behavioral Design Pattern (Communication Between Objects)
     a. Chain of Responsibility, Command, Interpreter, Iterator, Mediator, Memento, Observer, State, Strategy, Visitor, Template Method

63) Why Do We Need the Dependency Injection Design Pattern in C#?
A) The Dependency Injection Design Pattern in C# allows us to develop Loosely Coupled Software Components. In other words, we can say that Dependency Injection Design Pattern is used to reduce the Tight Coupling between the Software Components. As a result, we can easily manage future changes and other complexities in our application. In this case, if we change one component, then it will not impact the other components. 

Loosely Coupling means two objects are independent of each other. That means if we change one object then it will not affect another object. The loosely coupled nature of software development allows us to manage future changes easily and also allows us to manage the complexity of the application.

64) Different Types of Dependency Injection in C#?
A) The Injector Class injects the Dependency Object into the Client Class in three different ways. They are as follows.

   1. Constructor Injection: When the Injector Injects the Dependency Object (i.e. Service Object) into the Client Class through the Client Class Constructor, then it is called Constructor       Dependency Injection.
   2. Property Injection: When the Injector Injects the Dependency Object (i.e. Service Object) into the Client Class through the public Property of the Client Class, then it is called Property Dependency Injection. This is also called the Setter Injection.
   3. Method Injection: When the Injector Injects the Dependency Object (i.e. Service Object) into the Client Class through a public Method of the Client Class, then it is called Method Dependency Injection.


65) What is the Unity Container?
A) The Dependency Injection Design Pattern allows us to inject the dependency objects into a class that depends on them. Unity is a Dependency Injection Container that can be used for creating and injecting the dependency object using either constructor, method, or property injections.

66) what are required feature while installtion of IIS to host asp.net web application?
A) 1. .NET Framework 4.8 advanced servic
      A. ASP.NET 4.8
      B. WCF Services
       a. HTTP Activation
       b. TCP port sharing

   2. Internet Information Services(IIS)
     A. WEb Management Tools
      a. IIS Management Console

     B. World Wide Web Services
      a. Application Development Features
       1. .NET Extensibility 4.8
       2. ASP.NET 4.8
       3. ISAPI Extensiton
       4. ISAPI Filters
      b. Common HTTP Features
       1. HTTP Errors
       2. Default Document
       3. Directory Browsing
       4. Static Content
      c. Health And Diagnostics
       1. HTTP Logging
      d. Performance Features
       1. Static Content Compression
      e. Security 
       1. Request Filtering
       2. Windows Authentication
    C. IIS Hostable Web Core

67) HTTP Responce Codes?
A)Information 
   100- Continue
   101 - Switching Protocols
   102 - Processing
   103 - Early Hints
  Success
   200 - Ok
   201 - Created
   202 - Accepted
   204 - No Content
   206 - Partical Content
  Redirect
   300 - Multiple Choices
   301- Moved Permanantly
   304 - Not Modified 
   307 - Temporary Redirect
   308 - Permanant Redirect 
  Client Error
   400 - Bad Request 
   401 - Unauthorized
   403 - Forbidden
   404 - Not Found
   409 - Conflict
  ServerError
   500 - Internal Server Error
   501 - Not Implemented
   502 - Bad gateway
   503 - Service Unavailable 
   504 - Gateway Timeout
 
68) Web deployment String reverse program?
A) using System;
					
public class Program
{
	public static void Main()
	{
		string myStr, rev;
      myStr = "Bala";
      rev ="";
      Console.WriteLine("String is {0}", myStr);
      // find string length
      int len;
      len = myStr.Length - 1;
      while (len >= 0) {
         rev = rev + myStr[len];
         len--;
      }
      Console.WriteLine("Reversed String is {0}", rev);
      Console.ReadLine();
	}
}

69) remove duplicate recodrs?
A) By using the DISTINCT keyword, the GROUP BY clause, and the INNER JOIN statement, we can remove duplicates from a table in SQL.
SELECT DISTINCT customer_name FROM customers;
SELECT customer_id FROM orders GROUP BY customer_id;

SELECT a.department_id FROM employees a INNER JOIN employees b ON a.department_id = b.department_id WHERE a.employee_id > b.employee_id;

70) solid principles c#?
A) Solid Means : 
  S: Single Responsibility Principle (SRP) - Every software module should have only one reason to change.
  O: Open-closed Principle (OCP) - A software module/class is open for extension and closed for modification.
  L: Liskov substitution Principle (LSP) - you should be able to use any derived class instead of a parent class and have it behave in the same manner without modification.
  I: Interface Segregation Principle (ISP) - that clients should not be forced to implement interfaces they don't use. Instead of one fat interface, many small interfaces are preferred based on groups of methods, each serving one submodule.
  D: Dependency Inversion Principle (DIP) - high-level modules/classes should not depend on low-level modules/classes
  
71) Exception Class & Description?
A) 1. System.IO.IOException - Handles I/O errors.
   2. System.IndexOutOfRangeException - Handles errors generated when a method refers to an array index out of range.
   3. System.ArrayTypeMismatchException - Handles errors generated when type is mismatched with the array type.
   4. System.NullReferenceException - Handles errors generated from referencing a null object.
   5. System.DivideByZeroException - Handles errors generated from dividing a dividend with zero.
   6. System.InvalidCastException - Handles errors generated during typecasting.
   7. System.OutOfMemoryException - Handles errors generated from insufficient free memory.
   8 System.StackOverflowException - Handles errors generated from stack overflow.

72) ApplicationPool?
A) General
    1. .NET CLR Version - No Managed Code  , V4.0
    2. Managed Pipeline Mode - Integrated , Classic
    3. Queue Length - 1000
    4. Start Mode - Always Running, OnDemand 
   CPU
    1. Limit Action - NoAction
    2. Limit Interval - 5 minutes
   Process Model 
    1. Identity - ApplicationPoolIdentity , Local Service, Local System, Network Service.
    2. Idle Timeout - 20 minutes
    3. Maximum Worker Processes - 1
	4. Ping Maximum Response Time - 90 Seconds
	5. Ping Period  - 30 Seconds
	6. Shutdown Time Limit - 90 Seconds
	7. Start Time limit - 90 Seconds
   Recycling
    1. Regular Time Interval - 1740 minutes   

73) Charactor String Count?
A) using System;
					
public class Program
{
	public static void Main()
	{
		string str = "BalaKrishna";
      Console.WriteLine("String: "+str);
      while (str.Length > 0) {
         Console.Write(str[0] + " = ");
         int cal = 0;
         for (int j = 0; j < str.Length; j++) {
            if (str[0] == str[j]) {
               cal++;
            }
         }
         Console.WriteLine(cal);
         str = str.Replace(str[0].ToString(), string.Empty);
      }
      Console.ReadLine();
	}
}

74) What is request tracing?
A) a feature of IIS that provides a way to determine what exactly is happening with a request.Traces can help identify backend bottlenecks and errors that are harming the user experience.

75)Defining the IIS Application Pool?
A)  An IIS application pool is a pool—i.e., a collection—that houses applications on IIS. Each application pool consists of a process called w3wp.exe that runs on the server machine.

76) use of application pool in iis?
A) Application pools in Internet Information Services (IIS) enable you to host multiple web applications on a single server in isolation mode for improved security, availability, and performance.

77)what is worker process in iis?
A) Worker processes provide the execution environment for all web sites and applications configured in IIS. Valuable information such as CPU utilization and memory footprint can be obtained from the API to help monitor the health of worker processes and the web server.

78) Types of C# Constructors?
A) 1. Default Constructor - The term "default constructor" refers to a constructor that accepts no input arguments. Every class instance must be initialized to the identical 
      values  in a default constructor. The default constructor sets all numeric fields to zero and all string and object fields to null within a class.
   2. Parameterized Constructor - The term parameterized constructor refers to a constructor with at least one parameter. It can set different values for each instance of the class.
   3. Copy Constructor - By copying variables from another object, this constructor generates an object. Its primary purpose is to set the values of a new instance to 
      those of an existing one.
   4. Private Constructor - A private constructor is a constructor that is created with the private specifier. Other classes cannot inherit from this class, 
      and it is also impossible to create an instance of this class.
   5. Static Constructor - This constructor is called just once in the class, and it is called when the first reference to a static member of the class is made, 
      which is when the static constructor is called. A static constructor is used to initialize the class's static fields or data and is only used once.

79) middleware in .net core?
A) Middleware are software components that are assembled into an application pipeline to handle requests and responses.
   Middleware components can perform operations before and after the next component in the pipeline, such as authentication, logging, exception handling, and 
   static file serving.

80) http verb list?
A) 1. GET - Read -200 (OK), list of customers. Use pagination, sorting and filtering to navigate big lists.
   2. POST - POST - 201 (Created), 'Location' header with link to /customers/{id} containing new ID.
   3. PUT - Update/Replace - 405 (Method Not Allowed), unless you want to update/replace every resource in the entire collection.
   4. PATCH - Update/Modify - 405 (Method Not Allowed), unless you want to modify the collection itself.
   5. DELETE - Delete - 405 (Method Not Allowed), unless you want to delete the whole collection—not often desirable.

81) 3rd Highest Salary in Sql?
A) SELECT DISTINCT `salary` FROM `employee` ORDER BY `salary` DESC LIMIT 1 OFFSET 2;
   SELECT DISTINCT `salary` FROM `employee` ORDER BY `salary` DESC LIMIT 2, 1

82) Access Modifiers?
Caller's location	                  public	protected internal	protected	internal	private protected	private
Within the class	                    ✔️️	               ✔️	            ✔️	           ✔️	              ✔️	          ✔️
Derived class (same assembly)	            ✔️	               ✔️	            ✔️	           ✔️	              ✔️	          ❌
Non-derived class (same assembly)	    ✔️	               ✔️	            ❌	           ✔️	              ❌	          ❌
Derived class (different assembly)	    ✔️	               ✔️	            ✔️	           ❌	              ❌	          ❌
Non-derived class (different assembly)	    ✔️	               ❌	            ❌	           ❌	              ❌	          ❌

83) What is the diff b/w MVC and web API
--We can use the MVC for developing  the Web application that replies as both data and views but the Web API is used for generating the HTTP services that replies only as data.
--In the Web API the request performs tracing with the actions depending on the HTTP services but the MVC request performs tracing with the action name.
--The Web API returns the data in various formats, such as JSON, XML and other format based on the accept header of the request. But the MVC returns the data in the JSON format by using JSONResult.
--The Web API includes the various features of the MVC, such as routing, model binding but these features are different and are defined in the "System.Web.Http" assembly. And the MVC features are defined in the " System.Web.Mvc" assembly.
--The Web API helps the creation of RESTful services over the .Net Framework but the MVC does not support.


84) What is the diff b/w web service and web API
--All web services are APIs but All APIs are not web services
--web service supports XML. web API supports XML, JSON, or any other given format.
--web service does not have light-weight architecture because it needs SOAP protocol to send or receive and data over the network. API has a light-weight architecture.
--web service supports only http protocol, web API supports http and https.

85) What is the diff b/w soap API and web API
--soap transports data in standard XML format. web API transports data either XML, JSON, Text and HTML.
--soap works with Web Services Description Language(WSDL). web API works with GET, PUT, DELETE, POST.
--SOAP is less preferred than REST. REST more preferred than SOAP.


86) exception handling in sql?
A) BEGIN TRY
	--logic
   END TRY
   BEGIN CATCH
	PRINT 'ERROR OCCURED: ' + ERROR_MESSAGE();
   END CATCH


87) MVC Appication life cycle?
A) Any web application has two main execution steps, first understanding the request and depending on the type of the request sending out an appropriate response
   MVC requests are mapped to route tables which in turn specify which controller and action to be invoked. So if the request is the first request the first thing is to fill the rout table with routes collection. Depending on the URL sent “UrlRoutingModule” searches the route table to create “RouteData” object which will help create "RequestContext" object and this request object is sent to “MvcHandler”. 

88) List out different return types of a controller action method?
A) The base type of all these result types is ActionResult.

	ViewResult (View) - This return type is used to return a webpage from an action method.
	PartialviewResult (Partialview) - This return type is used to send a part of a view that will be rendered in another view.
	RedirectResult (Redirect) - This return type is used to redirect to any other controller and action method depending on the URL.
	RedirectToRouteResult (RedirectToAction, RedirectToRoute) - This return type is used when we want to redirect to any other action method.
	ContentResult (Content) - This return type is used to return HTTP content type like text/plain as the result of the action.
	jsonResult (json) - This return type is used when we want to return a JSON message.
	javascriptResult (javascript) - This return type is used to return JavaScript code that will run in the browser.
	FileResult (File) - This return type is used to send binary output in response.
	EmptyResult - This return type is used to return nothing (void) in the result.

89) What are the Filters in MVC?
A) controllers define action methods and these action methods generally have a one-to-one relationship with UI controls such as clicking a button or a link. Many times we would like to perform some action before or after a particular operation. For achieving this functionality, ASP.NET MVC provides a feature to add pre and post-action behaviors on the controller's action methods.

	Action Filters - Action filters are used to implement logic that gets executed before and after a controller action executes. We will look at Action Filters in detail in this chapter.
	Authorization Filters - Authorization filters are used to implement authentication and authorization for controller actions.
	Result Filters - Result filters contain logic that is executed before and after a view result is executed. For example, you might want to modify a view result right before the view is rendered to the browser.
	Exception Filters - Exception filters are the last type of filter to run. You can use an exception filter to handle errors raised by either your controller actions or controller action results. You can also use exception filters to log errors.

90) What are Action Filters in MVC?
A) Action Filters are additional attributes that can be applied to either a controller section or the entire controller to modify the way in which action is executed.

	Output Cache - This action filter caches the output of a controller action for a specified amount of time.
	Handle Error - This action filter handles errors raised when a controller action executes.
	Authorize - This action filter enables you to restrict access to a particular user or role.

91) Mention what is the difference between Temp data, View, and View Bag?
A) ViewData					  ViewBag						TempData
--used to pass data from controller to view.	  --used to pass data from the controller to view.	--used to pass data from the current req. to the next req.
--It is available for the current request only.	  --It is also available for the current request only.	--It keeps the information for the time of an HTTP Request.                                                                          					this means only from one page to another. It helps to maintain 													the data when we move from one controller to another controller 													or from one action to another action
--Requires typecasting for complex data types.	  --It doesn’t require typecasting.			--It requires typecasting for complex data types.
--If redirection occurs, then its value becomes null.

92) Explain Areas in MVC? 
A) Areas are just a way to divide or “isolate” the modules of large applications in multiple or separated MVC. When you add an area to a project, a route for the area is defined in an AreaRegistration file. The route sends requests to the area based on the request URL

93) Explain the concept of MVC Scaffolding?
A) ASP.NET Scaffolding is a code generation framework for ASP.NET Web applications. Using scaffolding can reduce the amount of time to develop standard data operations in your project.


94) Filetrs in Web API?
A) Action Filter - Used to add extra logic before or after action methods execute.
   Authorization Filter - Used to restrict access to action methods to specific users or groups.
   Exception Filter - Used to handle all unhandled exception in Web API.
   Result Filters - Result filters are executed before and after the execution of the result returned by a controller action. They allow you to modify the result before it's sent to the client
   Override Filters - Override filters allow you to override the behavior of other filters. They provide a way to control the execution order of filters and can be useful for implementing custom filter chains.

95) When to use SQL Server Service Broker?
A) Service Broker can distribute data workloads across several databases without programming complex communication and messaging internals.

96) What is Dapper?
A) Dapper is a simple and lightweight ORM(Object Relational Mapper) framework that allows you to execute SQL queries and map the results to .NET objects. Dapper uses raw SQL queries, which means that you have full control over the SQL that is executed. This makes Dapper fast and efficient, especially when dealing with large datasets. Additionally, Dapper is easy to use and has a small learning curve.

97) What is AutoMapper in C#?
A) AutoMapper is a popular open-source library in C# that simplifies mapping data between different classes or objects. It helps eliminate repetitive and error-prone code when copying data from one object to another. AutoMapper is especially useful in scenarios like mapping database entities to DTOs (Data Transfer Objects) or ViewModel objects.

98) What is mock in xUnit testing?
A) Mocking is a process used in unit testing when the unit being tested has external dependencies. The purpose of mocking is to isolate and focus on the code being tested and not on the behavior or state of external dependencies.

99) what is telemetry?
A) data that is automatically collected and uploaded to Microsoft to improve the customer experience and to operate the business.

100) What is an application insight?
A) Application Insights collects telemetry about your app, including web server telemetry, web page telemetry, and performance counters. 

101) What is OData and why is it used?
A) The OData Protocol is an application-level protocol for interacting with data via RESTful interfaces. It supports the description of data models, editing and querying of data according to those models.

102) what is routing in mvc?
A) Routing in ASP.NET MVC is a feature that maps incoming requests to controller actions. a pattern-matching system that monitors the incoming request and figures out what to do with that request.

103) What is routing and three segments?
A) The Default route maps the first segment of a URL to a controller name, the second segment of a URL to a controller action, and the third segment to a parameter named id.

104) How to enable routing in MVC?
A) add a call to routes. MapMvcAttributeRoutes() method within RegisterRoutes() method of RouteConfig. cs file.

105) What are the three models of MVC?
A) The MVC (Model-View-Controller) design pattern breaks an application into three parts: the Model (which handles data), the View (which is what users see), and the Controller (which connects the two).

106) difference between addtransient and addscoped and addsingleton?
A) The main difference between AddTransient, AddScoped, and AddSingleton is how long the service instance lasts:
   AddTransient
   A new instance of the service is created each time it's requested. This lifetime works best for lightweight, stateless services.
   AddScoped
   A single instance of the service is created per HTTP request. The same instance is shared across the request, but new instances are generated for each new 
   request.
   AddSingleton
   A single instance of the service is created for the entire application lifetime. The same instance is shared across the application, so instances remain the 
   same even if you refresh the page or load a new tab.
    Here are some ways to register design patterns in Program.cs:
      builder.Services.AddScoped<IContext, Context>();

107) what is the use of new keyword in c#?
A) The new keyword in C# has multiple uses, including: 
   Creating instances: The new keyword can be used to create a new instance of a type. For example, Enemy goblin = new Goblin();
   Hiding inherited members: The new keyword can be used to hide a member that is inherited from a base class. This allows derived classes to introduce a member 
   with the same name as those in their base classes.
   Generic type constraints: The new keyword can be used as a generic type constraint. 
   Instantiation of anonymous types: The new operator can be used to create an instance of an anonymous type. For example, 
   var example = new { Greeting = "Hello", Name = "World" };

108) how is process the url request?
A) When a user enters a URL into a browser, the browser processes the request in the following steps: 
   Find the IP address: The browser looks up the IP address for the domain in the URL. 
   Open a connection: The browser opens a TCP connection with the server at the destination's IP address. 
   Send the request: The browser sends an HTTP request to the server. 
   Receive a response: The server processes the request and sends back a response. 
   Render the content: The browser renders the content from the response. 

109) what is tcp connection?
A) Transmission Control Protocol (TCP) is a communications standard that enables application programs and computing devices to exchange messages over a network. It is designed to send packets across the internet and ensure the successful delivery of data and messages over networks.

110) What is TCP and HTTP?
A) TCP is in charge of setting up a reliable connection between two machines and HTTP uses this connection to transfer data between the server and the client. HTTP is used for transferring data while TCP is in charge of setting up a connection which should be used by HTTP in the communication process.

111) iis handler?
A) Handlers are Internet Information Services (IIS) components that are configured to process requests to specific content, typically to generate a response for the request resource.

112) What is shared method in C#?
A) these objects (that are declared with this keyword) are accessible by other functions and classes without having to create a new instance.

113) what is the use of interface in c#?
A) Interface provides flexibility, modularity, code reusability, and facilitate better design and problem-solving practices
   Abstraction: Interfaces can abstract away the implementation details of a class or struct, making code easier to understand and more modular.
   Multiple inheritance: C# does not support multiple inheritance of classes, but it does support multiple inheritance of interfaces.
   Plug-and-play: Interfaces can create a "plug-and-play" architecture, allowing different classes or structs to be easily swapped in and out. 
   Loosely-coupled applications: Interfaces can be used to build loosely-coupled applications, where components are not dependent on each other.
   Simulate inheritance: Interfaces can be used to simulate inheritance for structs.

114) How to access abstract class method in C#?
A) To access the abstract class, it must be inherited from another class.

115) How launchSettings.json different from appSettings.json
A) While both are configuration files, the launchSettings.json file is used to specify the settings that control how the application is launched, while the 
   appSettings.json file is used to specify application specific configurations.

116) how to remove duplicate values from array using c#?
A) 1.Distinct() Function
      int[] arr = { 1, 2, 2, 3, 4, 4, 5 };
        // Use Distinct to get unique values
        int[] distinct = arr.Distinct().ToArray();

   2.Using HashSet<T>
      int[] arr = { 1, 2, 2, 3, 4, 4, 5 };
        HashSet<int> set = new HashSet<int>(arr);

   3.Using a Loop
      int[] arr = { 1, 2, 2, 3, 4, 4, 5 };
        List<int> distinctList = new List<int>();

        foreach (int num in arr)
        {
            if (!distinctList.Contains(num))
            {
                distinctList.Add(num);
            }
        }

117) What is Reflection in C#?
A) Reflection is the process of describing the metadata of types, methods, and fields in a code. The namespace System. Reflection enables you to obtain data 
   about the loaded assemblies, the elements within them like classes, methods, and value types.

118) What are the types of classes in C#?
A)  Abstract class, Partial class, Sealed class, Static class

119) What is Multithreading with .NET?
A) Multi-threading is a process that contains multiple threads within a single process. Here each thread performs different activities. For example, we have a class and this call contains two different methods, now using multithreading each method is executed by a separate thread. So the major advantage of multithreading is it works simultaneously, which means multiple tasks execute at the same time. And also maximizing the utilization of the CPU because multithreading works on time-sharing concept mean each thread takes its own time for execution and does not affect the execution of another thread, this time interval is given by the operating system.

120) What is the difference between to dispose and finalize methods in C#?
A) The primary difference between dispose() and finalize() is that the dispose() must be explicitly invoked by the user and the finalize() is called by the garbage collector when the object is destroyed.

121) heap and stack memory in c#?
A) Stack Memory
    Usage: Used for static memory allocation and managing function calls.
    Storage: Stores value types (e.g., int, char, float) and references to objects.
    Access Speed: Fast access due to its LIFO (Last In, First Out) structure.
    Lifetime: Variables are automatically deallocated when they go out of scope.
    Example: Local variables within a method are stored on the stack.
  Heap Memory
    Usage: Used for dynamic memory allocation.
    Storage: Stores objects and reference types (e.g., class, array).
    Access Speed: Slower access compared to stack due to its unordered nature.
    Lifetime: Managed by the garbage collector, which frees up memory when objects are no longer in use.
    Example: Objects created using the new keyword are stored on the heap.

122) static class in c#?
A) A static class in C# is a class that cannot be instantiated and can only contain static members. This means you cannot create objects of a static class, and it is used to group methods and properties that do not require an instance of the class to be accessed.
Key Features of Static Class
Contains only static members: All members of a static class must be static. This includes methods, properties, fields, and events.
Cannot be instantiated: You cannot create an instance of a static class using the new keyword.
Sealed by default: Static classes are implicitly sealed, meaning they cannot be inherited.
No instance constructors: Static classes cannot have instance constructors, but they can have static constructors.

123) What are the distinctions between Array and Array List in C#?
A) Arrays store values or elements of the same data type, whereas array lists store values of various data types.
Arrays will use a fixed length, whereas array lists will not.

124) What exactly is the distinction between public, static, and void?
A) Public: Variables and methods declared as public are accessible from anywhere in the application. 

    Static: Without creating an instance of the class, static declared variables or methods are globally accessible. Static members are not globally accessible by default; it depends on the type of access modification used. The compiler saves the method's address as the entry point and uses it to start execution before any objects are created. 

    Void: It is a type modifier that indicates that the method or variable returns null.

125) What is the distinction between System.String and System.Text.StringBuilder?
A) Systems.Strings are unchangeable. When we change the value of a string variable, we allocate new memory to the new value and release the previous memory allocation. System.Text.StringBuilder was created with the concept of a mutable string in mind, allowing a variety of operations to be performed without the need for a separate memory location for the modified string.

126) What is the use of ‘using’ statement in C#?
A) The ‘using’ block is used to obtain a resource and process it and then automatically dispose of when the execution of the block completed.

127) What is difference between the “throw” and “throw ex” in .NET?
A) “Throw” statement preserves original error stack whereas “throw ex” have the stack trace from their throw point. It is always advised to use “throw” because it provides more accurate error information.

128) What is a Web API?
A) A Web API (Application Programming Interface) is an interface that allows different software systems to communicate and interact with each other over the internet using standardized protocols such as HTTP.

129) What is the difference between SOAP and RESTful APIs?
A) SOAP (Simple Object Access Protocol) is a protocol for exchanging structured information in the implementation of web services, while RESTful APIs use standard HTTP methods and represent resources as URLs.

130) What is an API endpoint?
A) An API endpoint is a specific URL within a web API that represents a resource or a collection of resources. Each endpoint corresponds to a particular operation that the API can perform.

131) What is CORS and why is it important in Web APIs?
A) CORS (Cross-Origin Resource Sharing) is a security feature implemented by web browsers that restricts resources from being requested from another domain. It is important in Web APIs because it allows servers to specify which origins are allowed to access their resources, thereby preventing unauthorized access to sensitive data.

132) What are the advantages of using JWT (JSON Web Tokens) for authentication in Web APIs?
A) JWT is a compact, URL-safe token format that securely transmits information between parties as a JSON object. Advantages include stateless authentication, scalability, and the ability to carry custom claims. Additionally, JWTs are easy to implement and can be used across different platforms and languages.

133) ienumerable and iqueryable in c#?
A) IEnumerable is simpler and provides basic functionality for working with collections, whereas IQueryable provides additional functionality for querying data from a data source in a more efficient manner by performing filtering and sorting operations in the data source itself before retrieving the data.

134) biggest number in the given numbers in c# code to find?
A)             int[] numbers = { 10, 5, 25, 8, 15 };
               int largest = numbers.Max();

               int a = 10;
               int b = 20;
               int largest = Math.Max(a, b);

               int x = 3, y = 4, z = 5;
               Console.WriteLine(Math.Max(Math.Max(x, y), z));

135) difference between app.use and app.run in .net core?
A) app.Run will end the request, and app.Use will pass the request to next middleware.

136) difference between truncate and delete and drop?
A) The DROP command in SQL removes the table from the database, the DELETE command removes one or more records from the table, and the TRUNCATE command removes all the rows from the existing table

137) SQL Commands?
A) DDL – Data Definition Language: CREATE, Drop, Alter, Truncate, Comment, Rename
   DQL – Data Query Language: Select 
   DML – Data Manipulation Language: Insert, Update, Delete, Lock
   DCL – Data Control Language: Grant, Revoke
   TCL – Transaction Control Language: BEGIN TRANSACTION, COMMIT, ROLLBACK, SAVEPOINT

138) Important SQL Commands?
A) SELECT: Used to retrieve data from a database.
   INSERT: Used to add new data to a database.
   UPDATE: Used to modify existing data in a database.
   DELETE: Used to remove data from a database.
   CREATE TABLE: Used to create a new table in a database.
   ALTER TABLE: Used to modify the structure of an existing table.
   DROP TABLE: Used to delete an entire table from a database.
   WHERE: Used to filter rows based on a specified condition.
   ORDER BY: Used to sort the result set in ascending or descending order.
   JOIN: Used to combine rows from two or more tables based on a related column between them.

139) Can DROP be rolled back?
A) No, a "DROP" statement, which permanently removes a table or database, cannot be rolled back.

140) What is the difference between a drop table and a DELETE table?
A) DROP will delete all data and the table structure as well. DELETE will delete the data but the table structure will remain the same and we can still rollback the data.

141) Can I rollback after commit?
A) A transaction can't be rolled back after a COMMIT TRANSACTION statement is executed.

142) What is the difference between a primary key and a unique key?
A) a primary key uniquely identifies each row in a table and cannot contain NULL values, while a unique key can allow one NULL value and a table can have multiple unique keys.

143) What is schema in SQL?
A) a graphical representation that makes it easy to organize information or knowledge, a collection of database objects like tables, triggers, stored procedures, etc.

144) Identify Duplicate Values in SQL?
A) SELECT ColumnName, COUNT(ColumnName) AS count FROM TableName GROUP BY ColumnName HAVING COUNT(ColumnName) > 1

145) Can we rollback DELETE?
A) Yes, you can rollback the data after using DELETE command since it is a DML statement.

146) What is normalization in SQL?
A) Normalization is the process of organizing data in a database.

147) Can we ROLLBACK after COMMIT?
A) A transaction can't be rolled back after a COMMIT TRANSACTION statement is executed

148) Common Table Expression (CTE)?
A) A Common Table Expression (CTE) in SQL is a temporary result set that can be referenced within a SELECT, INSERT, UPDATE, or DELETE statement. CTEs are defined using the WITH keyword and allow you to create a named, reusable subquery within your SQL statement.

149) What is trigger in SQL?
A) SQL triggers are stored procedures that automatically execute in response to certain events in a specific table or view in a database. They are used to maintain the integrity of the data, enforce business rules, and automate tasks. We can set triggers to fire before or after an INSERT , UPDATE , or DELETE operation.

150) What are the views in SQL?
A) Views are a special version of tables in SQL. They provide a virtual table environment for various complex operations. You can select data from multiple tables, or you can select specific data based on certain criteria in views.

151) What is the difference between a view and a table in SQL?
A) A table in a relational database consists of rows and columns which store data. A view, in simple terms, can be defined as a virtual table that is drawn out from a database.

152) What is pivot in SQL?
A) SQL PIVOT is a function that is used to create pivot tables and divide components of data into different columns and rows to make it easier to analyze.

153) How Does Token Based Authentication Works?
A) Token based Auth is a two-step process: 
    1) Client sends credentials to the server.
    2) Server respond backs with a token.
    3) Later to access the resource only this token is needed.

154) Why is it called JWT Token?
A) JWT stands for (JSON Web based Token). JSON stands for JavaScript object notation. JSON is a data format with name and value. Because we receive the token in JSON format, it’s termed as JWT Token.

155) Explain the Three Sections of JWT Token?
A) Header: This section has Algorithm and type of token.
   Payload: This has the identity and claims information.
   Signature: This section is created using the first two sections (Header, Payload) and Secret key.

156) What are Identity and Claims?
A) Identity identifies the user or entity uniquely. Claims talks about what roles / rights the user has with respect to the system.

157) Differentiate between Authentication VS Authorization?
A) Authentication ensures that the user exists in the system. Authorization talks about the roles and rights of the users. Authentication talks about WHO the user is and Authorization talks about WHAT the user can do with your system.

158) Claims vs Roles?
A) Roles
   Role classifies user types (Admin, User, Superuser) and to these user types roles are assigned.
   Roles are assigned to a user type.

   Claims
   Claims can have permissions but it talks more about the Subject.
   Claims are assigned to the actual USER.

159) Principal vs Identity?
A) Identity represents a user + roles + claims. Principal encapsulates identity object and can be assigned to a code / thread context.

160) Where is Token Checked in ASP.NET MVC ?
A) Token authenticity is checked in the pipeline. In the startup, we need to add this “JwtBearer” check in the pipeline.
  You also need to call “UseAuthentication” and “UseAthorization” in the same sequence first Authentication and then 
  Authorization as shown in the below code.
  app.UseAuthentication();
  app.UseAuthorization();

161) What is the Use of Authorize Attribute?
A) JWT Token authentication is only applied to controllers who have Authorize Attribute decorated.

162) How Do We Send Tokens From Client Side?
A) Token is sent in the REQUEST HEADER in standard format: “Authorization: Bearer XXTokenXX”

163) What Is a Refresh Token?
A) Refresh token is a separate token by which you can get a new JWT token.

164) Differentiate Between Access Tokens and Refresh Tokens?
A) Access tokens ( JWT Token) are tokens which helps you to access a secured resource while Refresh tokens helps to get new JWT token.

165) OAUTH vs OpenID vs OpenIdConnect vs JWTToken ?
A) OpenId, OAuth and OpenIdConnect are protocols while JWTToken is just a token.
   1) OpenId is all about authentication.
   2) OAUTH is all about authorization.
   3) OpenId connect has both of them.

166) which method will create the jwt token in c#?
A) To create a JWT token in C#, you'll use the JwtSecurityToken class from the System.IdentityModel.Tokens.Jwt namespace, along with a JwtSecurityTokenHandler to write the token. 

167) difference between multithreading and asynchronous programming in c#?
A) In C#, multithreading involves using multiple threads to execute tasks concurrently, while asynchronous programming uses a single thread to manage tasks, allowing for non-blocking operations and improved responsiveness, especially for I/O-bound scenarios. 

168) What are the Thread and Process?
A) Process – Process is something that the operating system uses to execute a program by providing the resources required. Each process has a unique process id associated with it. We can view the process within which a program is running using the windows task manager.

Thread – A Thread is a lightweight process that is responsible for executing application code. A process has at least one thread which is commonly called the main thread which actually executes the application code. A single process can have multiple threads.

169) What is the difference between Process and Thread?
A) A process is started when you start an Application. The process is a collection of resources like virtual address space, code, security contexts, etc. A process can start multiple threads. Every process starts with a single thread called the primary thread. You can create n number of threads in a process. Threads share the resources allocated to the process. A process is the parent and threads are his children.

170) Why do we need Multi-threading in our project?
A) You can do multiple tasks simultaneously. For e.g. saving the details of the user to a file while at the same time  retrieving something from a web service.
Threads are much more lightweight than processes. They don’t get their own resources. They used the resources allocated to a process.
Context-switch between threads takes less time than process.

171) What are the advantages and disadvantages of multithreading?
A) Advantages of multithreading:
   To maintain a responsive user interface
   It makes efficient use of processor time while waiting for I/O operations to complete.
   To split large, CPU-bound tasks to be processed simultaneously on a machine that has multiple CPUs/cores. 
   Disadvantages of multithreading:
   On a single-core/processor machine threading can affect performance negatively as there is overhead involved with 
   context-switching.
   Have to write more lines of code to accomplish the same task.
   Multithreaded applications are difficult to write, understand, debug, and maintain.

172) How can we create a Thread in C#?
A) To create a THREAD, we need to create an instance of Thread class (Thread class provided by System.Threading namespace) and to its constructor, we have to pass the function name as a parameter that we want the thread to execute. Then we need to call the start method of the Thread class. 

173) How do protect shared resources from concurrent access?
A) Using Interlocked.Increment() method: Modify AddOneMillion() method as shown below. The Interlocked.Increment() Method, increments a specified variable and stores the result, as an atomic operation

public static void AddOneMillion()
{
    for (int i = 1; i <= 1000000; i++)
    {
        Interlocked.Increment(ref Total);
    }
}
static object _lock = new object();
public static void AddOneMillion()
{
    for (int i = 1; i <= 1000000; i++)
    {
        lock (_lock)
        {
            Total++;
        }
    }
}

174) what is asynchronous programming in c#?
A) allows you to perform long-running operations without blocking the main thread, improving application responsiveness and performance.
async and await keywords facilitate asynchronous programming, enabling non-blocking operations and improving application responsiveness. async marks a method as asynchronous, while await suspends execution until an asynchronous operation completes. 

175) What happens if we execute an asynchronous method but don't await it?
A) Nothing special, the operation represented by the task will continue its lifetime normally, but the result won't be observed. The task object itself will eventually be reclaimed by garbage collector.
Note that we can also use .ContinueWith() to handle the result in a call-back fashion.

176) what is multi threading in c#?
A) multithreading allows a program to execute multiple tasks concurrently, improving performance and responsiveness by utilizing available CPU cores and resources efficiently.
Multithreading is a programming technique where a single program can perform multiple tasks at the same time by running them in separate threads. 

177) advantages and disadvantages of async and await in c#?
A) Advantages:
Improved Responsiveness: Async/await allows long-running operations to run in the background without blocking the main thread, resulting in a more responsive user interface (UI). 
Enhanced Readability: Asynchronous code using async and await can often resemble synchronous code, making it easier to read, understand, and maintain. 
Simplified Asynchronous Programming: These keywords streamline the process of writing asynchronous code, reducing the need for complex callback structures or continuation-passing style. 
Resource Utilization: By avoiding blocking the main thread, applications can handle more requests concurrently, improving resource utilization. 
Easier Error Handling and Testability: Async/await methods enable easier error handling and make asynchronous code easier to test. 

Disadvantages:
Overhead: While the overhead is usually minimal, using async and await can introduce a small performance overhead, especially when dealing with very short operations. 
Complexity: The underlying concepts of asynchronous programming and the use of async and await can be challenging for beginners to grasp. 
Potential for Deadlocks: Mixing synchronous and asynchronous code can lead to deadlocks, especially when using await in contexts where the calling thread is blocked. 
Overuse: Overusing async and await for every operation, even those that don't involve I/O, can lead to performance issues and make the code harder to understand. 
Async "All the Way Down": Once you start using async/await, you might find yourself needing to make every method async, which can lead to a lot of async code, even when it's not necessary. 
Async void methods: Async void methods have different error-handling semantics and are difficult to test. 

178) Why async is better than threads?
A) Improved Responsiveness: By avoiding thread blocking, asynchronous programming ensures that the application remains responsive and can handle a high volume of requests or events concurrently.

179) When not to use asynchronous?
A) If a situation requires urgent action or decision-making, asynchronous communication may not be the best option, as it can cause a delay in the response or decision.

180) garbage collection in c#?
A) garbage collection (GC) is an automatic memory management mechanism that periodically scans the application's memory to identify and reclaim objects that are no longer in use, freeing up memory for future use.

181) difference between finalize and dispose in c#?
A) Dispose() is a method you explicitly call to release resources (both managed and unmanaged) when an object is no longer needed, while Finalize() (or the destructor) is a method called automatically by the garbage collector to release unmanaged resources before the object is destroyed. 
Dispose(): Use Dispose() when you need to release resources at a specific time or when you need to ensure that resources are released even if exceptions occur.
Finalize(): Use Finalize() as a fallback mechanism to release unmanaged resources if Dispose() is not called. However, it's generally preferred to rely on Dispose() for resource management and only use Finalize() as a safety net. 

182) What is ASP.NET Web API routing?
A) Routing is a way how Web API matches a URI to an action. It is basically a process that decides which action and controller should be called. 
Convention-based routing: Web API supports convention-based routing. In this type of routing, Web API uses route templates to select which controller and action method to execute. 
Attribute-based routing: Web API 2 generally supports a new type of routing known as attribute routing. As the name suggests, it uses attributes to define routes. It is the ability to add routes to the route table via attributes. 

183) Average salary from table?
A) SELECT dname, AVG(salary) AS avg_salary
   FROM department as a left outer join employees as b on a.did=b.did 
   GROUP BY dept_name
   ORDER BY avg_salary DESC;

184) Program?
A) input: string s="hello world how are you bala";
		string[] re=s.Split(" ");
		int k=re.Length-1;
		string rev=string.Empty;
		while(k>=0)
		{
			if(string.IsNullOrEmpty(rev)){
			rev= re[k];
			k--;
		}else{
			rev=rev+" "+re[k];
			k--;
			}
		}
		Console.WriteLine(rev);
output: bala you are how world hello

185) Merging Two Arreys?
A)      int[] result = array1.Concat(array2).ToArray();
                     or
        int[] arr1 = new int[5] { 2, 5, 1, 7, 4 };
        int[] arr2 = new int[5] { 10, 16, 13, 17, 15 };
	int[] dTotal = new int[arr1.Length + arr2.Length];
        arr1.CopyTo(dTotal, 0);
        arr2.CopyTo(dTotal, arr1.Length);		
        foreach (int mainArr in dTotal)
        {
            Console.Write(mainArr);
            Console.Write("  ");
        }
        Console.ReadKey();

       or

        int[] arr1 = new int[5] { 2, 5, 1, 7, 4 };//1st array declared
        int[] arr2 = new int[4] { 10, 16, 13, 17 };
        int[] arr3 = new int[arr1.Length + arr2.Length];
        int k = 0;
        Console.WriteLine("--------------MERGED ARRAY-------------");
        for (int i = 0; i < arr3.Length;i++)
        {
            if(i<arr1.Length)
            {

                arr3[i] = arr1[i];//Array 1 has been Stored in a new Array

            }
            else if (i >= arr1.Length)
            {

                arr3[i] = arr2[k];  //Array 2 has been Stored in a new Array                  
                k++;
            }
                Console.Write(" "+ arr3[i]+" ");


        }
        Console.WriteLine();
        Console.WriteLine("\n\n--------------------After Sorting---------------------");
        Array.Sort(arr3);//Sorting The merged Array
        foreach (int mainArr in arr3)
        {
            Console.Write(mainArr);
            Console.Write("  ");
        }
        Console.ReadKey();

186) write a program to push all the zeros that are present to the end of the array using c#?
A)      int[] arr = { 0, 1, 0, 3, 12 };
        Console.WriteLine("Original array: " + string.Join(", ", arr));
        int nonZeroIndex = 0;

        // Iterate through the array and move non-zero elements to the front
        for (int i = 0; i < arr.Length; i++)
        {
            if (arr[i] != 0)
            {
                arr[nonZeroIndex++] = arr[i];
            }
        }

        // Fill the remaining positions with zeros
        for (int i = nonZeroIndex; i < arr.Length; i++)
        {
            arr[i] = 0;
        }
        Console.WriteLine("Array with zeros at the end: " + string.Join(", ", arr));
     }

187) Arrey Reverse?
A)      int[] arr = new int[5] { 1, 2, 3, 4, 5 };
        for (int i = arr.Length-1; i >= 0; i--)
        {
            Console.WriteLine(arr[i]);
        }

188) what is the difference between .net framework and .net core?
A) .NET Framework is a legacy, Windows-only platform, while .NET Core is a modern, cross-platform, and open-source framework that runs on Windows, macOS, and Linux. The main differences between . NET Core and . NET Framework revolve around cross-platform capabilities, performance, modularity, and development flexibility
.NET Framework: Ideal for legacy applications, desktop applications, and Windows-specific web applications.
.NET Core/ .NET: Best suited for new projects, cloud-based applications, microservices, and cross-platform development. 

189) how many types of authentication in web api?
A) There are several authentication methods for web APIs, including API keys, Basic Authentication, Token-based authentication (like JWT), and OAuth 2.0, each with its own strengths and weaknesses. 

 1. API Key Authentication:
    Mechanism: Clients are given a unique, secret key that they include in each request to the API. 
    Pros: Simple to implement and understand. 
    Cons: Less secure as keys can be compromised, and key management can become complex. 
2. Basic Authentication:
   Mechanism: Clients provide their username and password in each request, typically encoded in Base64. 
   Pros: Simple to implement. 
   Cons: Not secure as credentials are transmitted in plain text (unless using HTTPS). 
3. Token-Based Authentication (e.g., JWT):
   Mechanism: The server issues a token (e.g., JWT) upon successful authentication, and the client includes this token in 
   subsequent requests. 
   Pros: More secure than Basic Authentication, as tokens can be short-lived and revoked, and can be used for stateless 
   authentication. 
   Cons: Requires more complex implementation than API Keys or Basic Authentication. 
4. OAuth 2.0:
   Mechanism: A standard protocol that allows users to grant third-party applications access to their resources without 
   sharing their credentials directly.
   Pros: Highly secure and flexible, allowing for different levels of access.
   Cons: More complex to implement than other methods. 

190) Check the program?
A) Input:					
public class Program
{
	public static void Main()
	{
		parentclass obj=new childclass();
         obj.method();			
		Console.WriteLine("Hello World");
	}
   public class parentclass
 {
    public parentclass(){
	 Console.WriteLine("parentclass Constructor");}

    public  void method(){
	Console.WriteLine("parentclass method");}

}
public class childclass:parentclass
{
   public childclass(){
    Console.WriteLine("childclass Constructor");}

	  public  void method(){
      Console.WriteLine("childclass method");
}
}
}
Output: parentclass Constructor
        childclass Constructor
        parentclass method
        Hello World

191) what is repository pattern c# entity framework?
A) The Repository pattern in C# with Entity Framework helps create an abstraction layer between the data access layer and the business logic layer, allowing for cleaner code and easier testing. It provides a consistent interface for interacting with data persistence, such as a database.

192) Arrey sorting?
A)   int[] intArray = new int[] {2,9,4,3,5,1,7 };  
            int temp = 0;  
  
            for (int i = 0; i <= intArray.Length-1; i++)  
            {  
                for (int j = i+1; j < intArray.Length; j++)  
                {  
                    if (intArray[i] > intArray[j])  
                    {  
                        temp = intArray[i];  
                        intArray[i] = intArray[j];  
                        intArray[j] = temp;  
                    }  
                }  
            }  


193) lock in sql server?
A) to prevent concurrent use of resources by different transactions. For example, if an exclusive (X) lock is held on a row within a table by a transaction, no other transaction can modify that row until the lock is released.

194) Nolock in sql server?
A) NOLOCK overrides SQL Server default isolation level behavior and allows users to retrieve uncommitted data without affecting the locking mechanism on the required data

195) job scheduling in c# net?
A) The Job Scheduler allows you to define and maintain a set of jobs that need to be automatically executed either at a given point in time, at a specified frequency or when a specific event occurs in IGSS.
In C#, a job scheduler is a system that manages the execution of tasks or jobs at specified times or in response to events. It allows you to automate repetitive tasks, run background processes, and orchestrate the execution of code. 
In C# .NET, job scheduling can be achieved using various tools and techniques. Popular choices include Quartz.NET, FluentScheduler, Hangfire, and the built-in Timer class. These libraries provide different levels of complexity and features, catering to various project requirements. 

TaskScheduler Class: This is part of the .NET framework and is used to schedule tasks for execution. 
Quartz.NET:
  1. A full-featured, open-source job scheduling system.
  2. Supports complex schedules, persistence, and clustering.
  3. Ideal for enterprise applications with demanding scheduling needs. 
  Quartz.NET: Ideal for large, complex applications where you need a robust scheduler with advanced features. 
FluentScheduler:
  1. A simple and lightweight scheduler for .NET applications.
  2. Easy to integrate and use, making it suitable for smaller projects.
  3. Offers features like recurring tasks and job execution at specific times. 
  FluentScheduler: A good choice for simpler projects where you need to schedule tasks with ease. 
Hangfire:
  1. A lightweight job scheduler for .NET that is designed for background tasks.
  2. Supports recurring jobs and allows you to schedule tasks to run later.
  3. Can be easily integrated with ASP.NET applications. 
  Hangfire: A good fit for background task management in ASP.NET applications. 
Built-in Timer:
  1. The Timer class in the System.Threading namespace provides basic scheduling capabilities.
  2. Useful for simple periodic task execution.
  3. May require more manual management compared to dedicated libraries. 
  Timer: Suitable for simple periodic task execution in non-web applications. 	

196) What is batch processing in C#?
A) Batching is the process of dividing a large amount of data into smaller, manageable chunks or batches. This practice is crucial in data handling as it offers several advantages: Memory Efficiency: Smaller chunks can be processed more efficiently than large datasets, reducing memory usage.

197) what is web services in c#?
A) In C#, web services allow applications to interact with each other over the internet by exposing methods that can be invoked by other applications. They are essentially software components that exchange information via common internet protocols using XML-based data exchange. C# web services can be developed using ASP.NET Web Services or ASP.NET Core Web APIs. 
Key Aspects of C# Web Services:
Cross-Platform: C# web services can be accessed by applications written in different programming languages, provided they support the relevant protocols. 
XML-Based Data Exchange: Web services use XML to communicate, making them versatile and compatible with various platforms. 
SOAP and REST: Two primary types of web services are SOAP (Simple Object Access Protocol) and REST (Representational State Transfer), each with its own characteristics and advantages. 
ASP.NET Web Services: Traditional ASP.NET Web Services provide a way to create SOAP-based services using the WebService class and the WebMethod attribute. 
ASP.NET Core Web APIs: ASP.NET Core Web APIs offer a more modern and flexible approach to creating RESTful services. 

198) What is the role of a web service?
A) A Web service is a method of communication between two electronic devices over a network.

199) What is Swagger?
A) Swagger is an open source API documentation that helps us to understand API service methods.
When we consume a web API, then understanding its various methods and verbs can be challenging for a developer.  This solves the problem of generating documentation.  It's also known as OpenAPI.
Package installation: Swashbuckle.AspNetCore 
Swagger middleware: services.AddSwaggerGen();
 app.UseSwagger();
app.UseSwaggerUI(c =>
{
   c.SwaggerEndpoint("/swagger/v1/swagger.json", "My Test1 Api v1");
});    

200) 

 






     

    






















