1) what is a class?
A) A class is a user-defined blueprint or prototype from which objects are created. Basically, a class combines the fields and methods(member function which defines actions) into a single unit. In C#, classes support polymorphism, inheritance and also provide the concept of derived classes and base classes.

2) what is an object?
A) Object is nothing but an instance of a class that is created dynamically. Object is also a keyword that is an alias for the predefined type System. The unified type system of C# allows objects to be defined. These can be user-defined, reference or value type, but they all inherit directly or indirectly from System.

3) value type and reference type ?
A) Value Type : A data type is a value type if it holds a data value within its own memory space. It means the variables of these data types directly contain values.

tip : All the value types derive from System.ValueType, which in-turn, derives from System.Object.
For example, consider integer variable int i = 100;

The system stores 100 in the memory space allocated for the variable i. The following image illustrates how 100 is stored at some hypothetical location in the memory (0x239110) for 'i':

value types ex (bool
byte
char
decimal
double
enum
float
int
long
sbyte
short
struct
uint
ulong
ushort)

Reference Type : Unlike value types, a reference type doesn't store its value directly. Instead, it stores the address where the value is being stored. In other words, a reference type contains a pointer to another memory location that holds the data.

4) When does a session actually start?
A) A session actually starts when a visitor requests your site for the first time. A new session starts when the request doesn't contain any SessionID or the sessionID references an expired session. The Session_OnStart event in Global.asax can be used for tracking session-related information.

5) How is a session maintained?
A) When a web app is requested for the first time, the server creates a sessionID and saves it in the cookie of the client browser. This sessionID is sent to the server in all the subsequent requests. If cookieless is made true, sessionID is sent in the URL else the cookie file is sent. This way the session is maintained with SessionID.

6) Define Constructors
A) constructor is a member function in a class that has the same name as its class. The constructor is automatically invoked whenever an object class is created. It constructs the values of data members while initializing the class.

7) What is the difference between ref & out parameters?
A) An argument passed as ref must be initialized before passing to the method whereas out parameter needs not to be initialized before passing to a method.

8) What is method overloading?
A) Method overloading is creating multiple methods with the same name with unique signatures in the same class. When we compile, the compiler uses overload resolution to determine the specific method to be invoke.

9) What's the difference between an interface and abstract class?
A) Interfaces have all the methods having only declaration but no definition. In an abstract class, we can have some concrete methods. In an interface class, all the methods are public. An abstract class may have private methods.

10) What is the difference between method overriding and method overloading?
A) In method overriding, we change the method definition in the derived class that changes the method behavior. Method overloading is creating a method with the same name within the same class having different signatures.

11) URL - Uniform resource locator is a virtual path generated by web server in order to access resource from a website.
12) URI - Uniform resource indicator specifies a named location with URL

13) whet is view engine?
A) it converts server side scripting to HTML.

14) diff between remote and windows service?
A) using remoting we can develop distributed applicatons, client-server/ network applications. distributed means communication between 2 applications or objects running in same machine or differnent machine. sharing data across networks. can carry data from server to client viceversa.
 1. proxy 2. marshalling/unmarshalling 3. protocals 4. server obj

 1.proxy : mediator b/w client and server
 2.marshalling/serialization : convert obj type into n/w understandable code
   unmarshalling/deserialization : n/w understandable code to obj 

15) diff between function and trigger?
A) 1. A Trigger is implicitly invoked whenever any event such as INSERT, DELETE, UPDATE occurs in a TABLE.
   1. A Procedure is explicitly called by user/application using statements or commands such as exec, EXECUTE, or simply procedure_name

   2. Transaction statements such as COMMIT, ROLLBACK, SAVEPOINT are not allowed in triggers.
   2. All transaction statements such as COMMIT, ROLLBACK are allowed in procedures.

   3. We cannot return values in a trigger. Also, as an input, we cannot pass values as a parameter.
   3. We can return 0 to n values. However, we can pass values as parameters.

16) what is windows service?
A) Windows Services are a core component of the Microsoft Windows operating system. enable the management of long-running processes. Unlike regular software that is launched by the end user and only runs when the user is logged on, Windows Services can start without user intervention and may continue to run long after the user has logged off. The services run in the background.

17) How to install windows service?
A) C:\Windows\Microsoft.NET\Framework64\v4.0.30319>InstallUtil.exe -i C:\TimerService\TimerService\bin\Debug\TimerService.exe


18) what is prime number ?
A) devided by it self

    n = int.Parse(Console.ReadLine());  
          m=n/2;    
          for(i = 2; i <= m; i++)    
          {    
           if(n % i == 0)    
            {    
             Console.Write("Number is not Prime.");    
             flag=1;    
             break;    
            }    
          }
	  if (flag==0)    
          Console.Write("Number is Prime.");    
 
for (int i = 1; i < 101; i++)
            {
               int count = 0;
                if (i > 1)
                {
                    for (int j = 2; j < i; j++)
                    {
                        if (i % j == 0)
                        {
                            count = 1;
                            break;
                        }
                    }
                    if (count == 0)
                    {
                        Console.Write(i+"  ");
                    }
                }
}

19) dataset and datareader in c#?
A)DataSet	                                                DataReader 

It has read/write access, we can update records  	           It has read-only access, we can’t update records
It supports both forward and backward scanning of data	         It supports forward-only scanning of data
It supports multiple data tables from different databases	It only supports a single table of one database
Slower access to data                                           Faster access to data
It is connection-less oriented                                  It is connection oriented

20) private constructor in c#?
A) Private constructors are used to prevent creating instances of a class

21) ViewState and DataTable?
A) Viwestate["Key"]=DataTable and DataTable dt=(DataTable)Viwestate["Key"]

22) RequiredField namespace?
A)System.ComponentModel.DataAnnotations

23) use of global.asax in asp.net?
A)Global.asax is an optional file which is used to handling higher level application events such as Application_Start, Application_End, Session_Start, Session_End etc. It is also popularly known as ASP.NET Application File. This file resides in the root directory of an ASP.

24) advantages of cache memory c#?
A) Reduce load on Web Services/ Database
Increase Performance
Reliability 

25) How to extract number from string?
A) System.Text.RegularExpressions;
string var = "Hello3453232wor705Ld";
                string mystr = Regex.Replace(var, @"\d", "");// only string
                string mynumber = Regex.Replace(var, @"\D", "");// only Number

26) how to assign null value to integer in c#?
A)  int? val=null; or Nullable<int> val

27) Constraints in SQL Server?
A) Default Constraint
UNIQUE KEY constraint
NOT NULL constraint
CHECK KEY constraint
PRIMARY KEY constraint
FOREIGN KEY constraint.

28) Foregin key ?
A) ALTER TABLE Orders
ADD FOREIGN KEY (PersonID) REFERENCES Persons(PersonID);

29) clause sequence in sql?
A) SELECT, FROM, WHERE, GROUP BY, HAVING and ORDER BY

30) Operator in SQL Server?
A) Assignment operator (=)
Arithmetic operator(+,-,*,%,/)
Comparison operator(=,!=,>,<,>=,<=,!<,!>)
Logical operator(and,or,not)
Set operator(UNION,UNION ALL,INTERSECT,INTERSECT)

31) joins in sql?
A) ANSI format JOINS (Inner join,Outer join(Left outer join,Right outer join,Full outer join),Cross join)
NON-ANSI format JOINS (EQUI join,NON-EQUI join,SELF-join,Natural Join)

32) string function in sql?
A) ASCII,LTRIM,RTRIM,LTRIM(RTRIM(‘   Hello   ‘)),LOWER,LOWER,REVERSE,LEN,LEFT(‘ABCDE’, 3),RIGHT(‘ABCDE’, 3),

33) store procedure in c#?
A) using (SqlCommand cmd = new SqlCommand("SP_ADD", con))
    {
        cmd.CommandType = CommandType.StoredProcedure;
        cmd.Parameters.AddWithValue("@FirstName", txtfirstname.Text);
        cmd.Parameters.AddWithValue("@LastName", txtlastname.Text);
        con.Open();
        cmd.ExecuteNonQuery();
        con.Close();
    }
using(sqlCon=new SqlConnection(SqlconString))  
           {  
             sqlCon.Open();  
             SqlCommand sql_cmnd = new SqlCommand("PROC_NAME", sqlCon);  
             sql_cmnd.CommandType = CommandType.StoredProcedure;  
             sql_cmnd.Parameters.AddWithValue("@FIRST_NAME", SqlDbType.NVarChar).Value=firstName;  
             sql_cmnd.Parameters.AddWithValue("@LAST_NAME", SqlDbType.NVarChar).Value=lastName;  
             sql_cmnd.Parameters.AddWithValue("@AGE", SqlDbType.Int).Value = age;  
             sql_cmnd.ExecuteNonQuery();  
             sqlCon.Close();  
           } 

using (SqlConnection conn = new SqlConnection(connString))
                {
                    string spName = @"dbo.[uspEmployeeInfo]";
                    SqlCommand cmd = new SqlCommand(spName, conn);
                    SqlParameter param1 = new SqlParameter();
                    param1.ParameterName = "@employeeID";
                    param1.SqlDbType = SqlDbType.Int;
                    param1.Value = int.Parse(args[0].ToString());
                    cmd.Parameters.Add(param1);
                    conn.Open();
                    cmd.CommandType = CommandType.StoredProcedure;
                    SqlDataReader dr = cmd.ExecuteReader();
                    dr.Close();
                    conn.Close();
                  }

34) Extension Methods?
A) Extension methods, as the name suggests, are additional methods. Extension methods allow you to inject additional methods without modifying, deriving or recompiling the original class, struct or interface. Extension methods can be added to your own custom class, .NET framework classes, or third party classes or interfaces.

35) const vs readonly c#?
A) ReadOnly Keyword                                             	Const Keyword
In C#, readonly fields can be created using readonly keyword	    In C#, constant fields are created using const keyword.
ReadOnly is a runtime constant.	                                    Const is a compile time constant.
The value of readonly field can be changed.	                        The value of the const field can not be changed.
It cannot be declared inside the method.	                        It can be declared inside the method.
In readonly fields, we can assign values in declaration             In const fields, we can only assign values in declaration part.
and in the constructor part.	                               
It can be used with static modifiers.	                            It cannot be used with static modifiers.

36) unique char in given string?
A) string code = "helloBalabworld";
   string answer = new string(code.Distinct().ToArray());

37) json.stringify and json.parse difference?
A) stringify() is used to convert JSON object to JSON String. It serializes a JavaScript object into a JSON string.
parse() is used to convert JSON string/Array object to JSON Object. It deserializes a JSON string into a JavaScript object.

38) Encapsulation?
A) Wrapping up a data member and a method together into a single unit (in other words, class) is called Encapsulation.

39) Abstraction?
A) Abstraction is "To represent the essential feature without representing the background details."

40) Inheritance?
A) When a class includes a property of another class, it is known as inheritance. Inheritance is a process of object reusability.

C#.Net will support 5 types of Inheritance. They are
1. Single Inheritance
2. Multi-level Inheritance
3. Multiple Inheritance
4. Hierarchical Inheritance
5. Hybrid Inheritance

41) Polymorphism?
A) Polymorphism means one name, many forms. One function behaves in different forms. In other words, "Many forms of a single object is called Polymorphism."

42) Difference between Abstract Class and Interface?
A) Abstract Class	Interface
It contains both declaration and implementation parts.	It contains only the declaration of methods, properties, events, or indexers. Since C# 8, default implementations can also be included in interfaces.
Multiple inheritance is not achieved by abstract class.	Multiple inheritance is achieved by interface.
It contain constructor.	It does not contain constructor.
It can contain static members.	It does not contain static members.
It can contain different types of access modifiers like public, private, protected etc.	It only contains public access modifier because everything in the interface is public.
The performance of an abstract class is fast.	The performance of interface is slow because it requires time to search actual method in the corresponding class.
It is used to implement the core identity of class.	It is used to implement peripheral abilities of class.
A class can only use one abstract class.	A class can use multiple interface.
If many implementations are of the same kind and use common behavior, then it is superior to use abstract class.	If many implementations only share methods, then it is superior to use Interface.
Abstract class can contain methods, fields, constants, etc.	Interface can only contains methods, properties, indexers, events.
The keyword “:” can be used for implementing the Abstract class.	The keyword “:” and “,” can be used for implementing the Interface.
It can be fully, partially or not implemented.	It should be fully implemented.
To declare abstract class , we use abstract keyword.	To declare interface, we use interface keyword.

43) Difference between functions and stored procedures?
A) 1. SP may or may not return a value but UDF must return a value.
   2. SP can have input/output parameters but UDF only has input parameters. 
   3. We can call UDF from SP but cannot call SP from a function. 
   4. We cannot use SP in SQL statements like SELECT, INSERT, UPDATE, DELETE, MERGE, etc. but we can use them with UDF.
   5. SP is not allowed to be used in SELECT statements, but UDF can be used.
   6. SP cannot be used anywhere in the WHERE/HAVING/SELECT part of SQL queries, but UDF can be used.
   7. The execution plan can be re-used in SP but in UDF it will be compiled every time.
   8. We can use try-catch exception handling in SP but we cannot do that in UDF.
   9. We can use transactions in SP but it is not possible in UDF.
  10. We can consider UDF as an expression but it is not possible in SP.
  11. SP cannot be used in the join clause but it is possible in UDF as a resultset.
  12. SP can have both table variables and temporary tables but UDF can have only table variables as it does not permit the use of temporary tables.

44) index in sql?
A) The Index in SQL is a special table used to speed up the searching of the data in the database tables.
   1. Clustered Index - Clustered Index stores and sort rows of data in a view or table depending on their central values.
   2. Non-Clustered Index - It represents a structure, which is isolated from data rows.
   3. Column Store Index - a standard type of index with regards to putting away and questioning enormous data warehousing truth tables.
   4. Filtered Index - that is made when a column has just a few applicable numbers for questions on the subset of values.
   5. Hash Index - that slots containing a pointer or an array of N buckets and a row on each slot or bucket.
   6. Unique Index - confirms and guarantees that the index key doesn’t contain any copy esteems and along these lines.
 

45). What is C#? And What is the latest version of C#?
A) C# is a computer programming language. Microsoft developed C# in 2000 to provide a modern general-purpose programming language that can be used to develop all kinds of software targeting various platforms, including Windows, Web, and Mobile, using just one programming language. Today, C# is one of the most popular programming languages in the world. Millions of software developers use C# to build all kinds of software. 

46). What is an object in C#? 
 A) C# language is an object-oriented programming language. Classes are the foundation of C#. A class is a template that defines a data structure and how data will be stored, managed, and transferred. A class has fields, properties, methods, and other members.

While classes are concepts, objects are real. Objects are created using class instances. A class defines the type of an object. Objects store real values in computer memory.

47) . What is Managed or Unmanaged Code? 
 A) Managed Code
Managed code is the code that is developed using the .NET framework and its supported programming languages such as C# or VB.NET.
Unmanaged Code
The code that is developed outside of the .NET framework is known as unmanaged code.

48) . What is Boxing and Unboxing in C#? 
 A) Boxing and Unboxing are both used for type conversions.

Converting from a value type to a reference type is called boxing. Boxing is an implicit conversion. Here is an example of boxing in C#.

// Boxing
int anum = 123;
Object obj = anum;
Console.WriteLine(anum);
Console.WriteLine(obj);

Converting from a reference type to a value type is called unboxing. Here is an example of unboxing in C#.

// Unboxing
Object obj2 = 123;
int anum2 = (int)obj;
Console.WriteLine(anum2);
Console.WriteLine(obj);

49) . What is the difference between a struct and a class in C#? 
A) Struct
The struct is a value type in C# and inherits from System.Value Type.
Struct is usually used for smaller amounts of data.
Struct can’t be inherited from other types.
A structure can't be abstract.
No need to create an object with a new keyword.
Do not have permission to create any default constructor.

Class
The class is a reference type in C#, and it inherits from the System.Object Type.
Classes are usually used for large amounts of data.
Classes can be inherited from other classes.
A class can be an abstract type.
We can create a default constructor.

50) . What is the difference between Interface and Abstract Class in C#? 
 A) A class can implement any number of interfaces, but a subclass can, at most, use only one abstract class.
An abstract class can have non-abstract methods (concrete methods), while in the case of interface, all the methods have to be abstract.
An abstract class can declare or use any variables, while an interface cannot do so.
In an abstract class, all data members or functions are private by default, while in an interface, all are public; we can’t change them manually.
In an abstract class, we need to use abstract keywords to declare abstract methods; in an interface, we don’t need that.
An abstract class can’t be used for multiple inheritance, while the interface can be used for multiple inheritance.
An abstract class uses a constructor, while we don’t have any constructor in an interface.

51). What is an enum in C#? 
 A) An enum is a value type with a set of related named constants, often called an enumerator list. The enum keyword is used to declare an enumeration. It is a primitive data type that is user-defined.
enum Dow {Sat, Sun, Mon, Tue, Wed, Thu, Fri};

52) . What is the difference between “continue” and “break” statements in C#? 
 A) Using a break statement, you can 'jump out of a loop,' whereas using a continue statement, you can 'jump over one iteration' and resume your loop execution.

53) . What is the difference between constant and readonly in C#?
 A) Const is nothing but "constant," a variable whose value is constant but at compile time. Therefore, it's mandatory to assign a value to it. By default, a const is static, and we cannot change the value of a const variable throughout the entire program.
Readonly is the keyword whose value we can change during runtime or assign it at run time but only through the non-static constructor.

54) . What is the difference between ref and out keywords?
 A) The ref keyword passes arguments by reference. Therefore, any changes made to this argument in the method will be reflected in that variable when the control returns to the calling method.
The out keyword passes arguments by reference. This is very similar to the ref keyword.

55) . Can “this” be used within a static method?
 A) We can't use 'this' in a static method because the keyword 'this' returns a reference to the current instance of the class containing it. Static methods (or any static member) do not belong to a particular instance. They exist without creating an instance of the class and are called with the name of a class, not by instance, so we can’t use this keyword in the body of static Methods. However, in the case of Extension Methods, we can use the parameters of the method.

56) . What are properties in C#?
 A) In C#, a property is a member of a class that provides a way to read, write or compute the value of a private field. It exposes a public interface to access and modify the data stored in a class while allowing the class to maintain control over how that data is accessed and manipulated.

57) . What is an extension method in C#?
 A) In C#, an extension method is a static method used to extend the functionality of an existing type without modifying the original type or creating a new derived type. Extension methods allow developers to add methods to existing types, such as classes, structs, interfaces, enums, etc., not originally defined in those types.
public static class StringExtensions
{
    public static string CapitalizeFirstLetter(this string str)
    {
        if (string.IsNullOrEmpty(str))
            return str;
        return char.ToUpper(str[0]) + str.Substring(1);
    }
}

58) . What is the use of a delegate in C#?
 A) A Delegate is an abstraction of one or more function pointers (as existed in C++; the explanation about this is out of the scope of this article). The .NET has implemented the concept of function pointers in the form of delegates. With delegates, you can treat a function as data. Delegates allow functions to be passed as parameters, returned from a function as a value, and stored in an array. Delegates have the following characteristics:

59) . What are sealed classes in C#?
 A) Sealed classes are used to restrict the inheritance feature of object-oriented programming. Once a class is defined as a sealed class, the class cannot be inherited. 

60) . What are partial classes in C#? Why do we need partial classes?
 A) A partial class is only used to split the definition of a class into two or more classes in the same source code file or more than one source file. You can create a class definition in multiple files, which will be compiled as one class at run time. Also, when you create an instance of this class, you can access all the methods from all source files with the same object.

61) Generics in C#?
A) Generics in C# is a feature that allows for the creation of reusable code by creating parameterized types. In simple terms, it enables us to create classes, interfaces, and methods that work with different data types without having to define the data type explicitly.

62) Design Patterns In C#?
A) Design Patterns: Elements of Reusable Object-Oriented Software
   1. Creational Design Pattern (Object Creation and Initialization)
     a. Factory Method, Abstract Factory, Builder, Prototype, Singleton
	 Singleton : This pattern ensures that the class has only one instance and provides a global point of access to it. The pattern ensures that only one object of a specific class is ever created. services.AddSingleton<ILog, MyConsoleLogger>();
   2. Structural Design Pattern (Structural Changes of Classes, and Interfaces, and the Relationship Between Classes)
     a. Adapter, Bridge, Composite, Decorator, Façade, Flyweight, Proxy
   3. Behavioral Design Pattern (Communication Between Objects)
     a. Chain of Responsibility, Command, Interpreter, Iterator, Mediator, Memento, Observer, State, Strategy, Visitor, Template Method

63) Why Do We Need the Dependency Injection Design Pattern in C#?
A) The Dependency Injection Design Pattern in C# allows us to develop Loosely Coupled Software Components. In other words, we can say that Dependency Injection Design Pattern is used to reduce the Tight Coupling between the Software Components. As a result, we can easily manage future changes and other complexities in our application. In this case, if we change one component, then it will not impact the other components. 

Loosely Coupling means two objects are independent of each other. That means if we change one object then it will not affect another object. The loosely coupled nature of software development allows us to manage future changes easily and also allows us to manage the complexity of the application.

64) Different Types of Dependency Injection in C#?
A) The Injector Class injects the Dependency Object into the Client Class in three different ways. They are as follows.

   1. Constructor Injection: When the Injector Injects the Dependency Object (i.e. Service Object) into the Client Class through the Client Class Constructor, then it is called Constructor       Dependency Injection.
   2. Property Injection: When the Injector Injects the Dependency Object (i.e. Service Object) into the Client Class through the public Property of the Client Class, then it is called Property Dependency Injection. This is also called the Setter Injection.
   3. Method Injection: When the Injector Injects the Dependency Object (i.e. Service Object) into the Client Class through a public Method of the Client Class, then it is called Method Dependency Injection.


65) What is the Unity Container?
A) The Dependency Injection Design Pattern allows us to inject the dependency objects into a class that depends on them. Unity is a Dependency Injection Container that can be used for creating and injecting the dependency object using either constructor, method, or property injections.

66) what are required feature while installtion of IIS to host asp.net web application?
A) 1. .NET Framework 4.8 advanced servic
      A. ASP.NET 4.8
      B. WCF Services
       a. HTTP Activation
       b. TCP port sharing

   2. Internet Information Services(IIS)
     A. WEb Management Tools
      a. IIS Management Console

     B. World Wide Web Services
      a. Application Development Features
       1. .NET Extensibility 4.8
       2. ASP.NET 4.8
       3. ISAPI Extensiton
       4. ISAPI Filters
      b. Common HTTP Features
       1. HTTP Errors
       2. Default Document
       3. Directory Browsing
       4. Static Content
      c. Health And Diagnostics
       1. HTTP Logging
      d. Performance Features
       1. Static Content Compression
      e. Security 
       1. Request Filtering
       2. Windows Authentication
    C. IIS Hostable Web Core

67) HTTP Responce Codes?
A)Information 
   100- Continue
   101 - Switching Protocols
   102 - Processing
   103 - Early Hints
  Success
   200 - Ok
   201 - Created
   202 - Accepted
   204 - No Content
   206 - Partical Content
  Redirect
   300 - Multiple Choices
   301- Moved Permanantly
   304 - Not Modified 
   307 - Temporary Redirect
   308 - Permanant Redirect 
  Client Error
   400 - Bad Request 
   401 - Unauthorized
   403 - Forbidden
   404 - Not Found
   409 - Conflict
  ServerError
   500 - Internal Server Error
   501 - Not Implemented
   502 - Bad gateway
   503 - Service Unavailable 
   504 - Gateway Timeout
 
68) Web deployment String reverse program?
A) using System;
					
public class Program
{
	public static void Main()
	{
		string myStr, rev;
      myStr = "Bala";
      rev ="";
      Console.WriteLine("String is {0}", myStr);
      // find string length
      int len;
      len = myStr.Length - 1;
      while (len >= 0) {
         rev = rev + myStr[len];
         len--;
      }
      Console.WriteLine("Reversed String is {0}", rev);
      Console.ReadLine();
	}
}

69) remove duplicate recodrs?
A) By using the DISTINCT keyword, the GROUP BY clause, and the INNER JOIN statement, we can remove duplicates from a table in SQL.
SELECT DISTINCT customer_name FROM customers;
SELECT customer_id FROM orders GROUP BY customer_id;

SELECT a.department_id FROM employees a INNER JOIN employees b ON a.department_id = b.department_id WHERE a.employee_id > b.employee_id;

70) solid principles c#?
A) Solid Means : 
  S: Single Responsibility Principle (SRP) - Every software module should have only one reason to change.
  O: Open-closed Principle (OCP) - A software module/class is open for extension and closed for modification.
  L: Liskov substitution Principle (LSP) - you should be able to use any derived class instead of a parent class and have it behave in the same manner without modification.
  I: Interface Segregation Principle (ISP) - that clients should not be forced to implement interfaces they don't use. Instead of one fat interface, many small interfaces are preferred based on groups of methods, each serving one submodule.
  D: Dependency Inversion Principle (DIP) - high-level modules/classes should not depend on low-level modules/classes
  
71) Exception Class & Description?
A) 1. System.IO.IOException - Handles I/O errors.
   2. System.IndexOutOfRangeException - Handles errors generated when a method refers to an array index out of range.
   3. System.ArrayTypeMismatchException - Handles errors generated when type is mismatched with the array type.
   4. System.NullReferenceException - Handles errors generated from referencing a null object.
   5. System.DivideByZeroException - Handles errors generated from dividing a dividend with zero.
   6. System.InvalidCastException - Handles errors generated during typecasting.
   7. System.OutOfMemoryException - Handles errors generated from insufficient free memory.
   8 System.StackOverflowException - Handles errors generated from stack overflow.

72) ApplicationPool?
A) General
    1. .NET CLR Version - No Managed Code  , V4.0
    2. Managed Pipeline Mode - Integrated , Classic
    3. Queue Length - 1000
    4. Start Mode - Always Running, OnDemand 
   CPU
    1. Limit Action - NoAction
    2. Limit Interval - 5 minutes
   Process Model 
    1. Identity - ApplicationPoolIdentity , Local Service, Local System, Network Service.
    2. Idle Timeout - 20 minutes
    3. Maximum Worker Processes - 1
	4. Ping Maximum Response Time - 90 Seconds
	5. Ping Period  - 30 Seconds
	6. Shutdown Time Limit - 90 Seconds
	7. Start Time limit - 90 Seconds
   Recycling
    1. Regular Time Interval - 1740 minutes   

73) Charactor String Count?
A) using System;
					
public class Program
{
	public static void Main()
	{
		string str = "BalaKrishna";
      Console.WriteLine("String: "+str);
      while (str.Length > 0) {
         Console.Write(str[0] + " = ");
         int cal = 0;
         for (int j = 0; j < str.Length; j++) {
            if (str[0] == str[j]) {
               cal++;
            }
         }
         Console.WriteLine(cal);
         str = str.Replace(str[0].ToString(), string.Empty);
      }
      Console.ReadLine();
	}
}

74) What is request tracing?
A) a feature of IIS that provides a way to determine what exactly is happening with a request.Traces can help identify backend bottlenecks and errors that are harming the user experience.

75)Defining the IIS Application Pool?
A)  An IIS application pool is a pool—i.e., a collection—that houses applications on IIS. Each application pool consists of a process called w3wp.exe that runs on the server machine.

76) use of application pool in iis?
A) Application pools in Internet Information Services (IIS) enable you to host multiple web applications on a single server in isolation mode for improved security, availability, and performance.

77)what is worker process in iis?
A) Worker processes provide the execution environment for all web sites and applications configured in IIS. Valuable information such as CPU utilization and memory footprint can be obtained from the API to help monitor the health of worker processes and the web server.

78) Types of C# Constructors?
A) 1. Default Constructor - The term "default constructor" refers to a constructor that accepts no input arguments. Every class instance must be initialized to the identical 
      values  in a default constructor. The default constructor sets all numeric fields to zero and all string and object fields to null within a class.
   2. Parameterized Constructor - The term parameterized constructor refers to a constructor with at least one parameter. It can set different values for each instance of the class.
   3. Copy Constructor - By copying variables from another object, this constructor generates an object. Its primary purpose is to set the values of a new instance to 
      those of an existing one.
   4. Private Constructor - A private constructor is a constructor that is created with the private specifier. Other classes cannot inherit from this class, 
      and it is also impossible to create an instance of this class.
   5. Static Constructor - This constructor is called just once in the class, and it is called when the first reference to a static member of the class is made, 
      which is when the static constructor is called. A static constructor is used to initialize the class's static fields or data and is only used once.

79) middleware in .net core?
A) Middleware are software components that are assembled into an application pipeline to handle requests and responses.

80) http verb list?
A) 1. GET - Read -200 (OK), list of customers. Use pagination, sorting and filtering to navigate big lists.
   2. POST - POST - 201 (Created), 'Location' header with link to /customers/{id} containing new ID.
   3. PUT - Update/Replace - 405 (Method Not Allowed), unless you want to update/replace every resource in the entire collection.
   4. PATCH - Update/Modify - 405 (Method Not Allowed), unless you want to modify the collection itself.
   5. DELETE - Delete - 405 (Method Not Allowed), unless you want to delete the whole collection—not often desirable.


























